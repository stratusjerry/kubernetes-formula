# -*- coding: utf-8 -*-
# vim: ft=yaml
#
# Setup variables using grains['os_family'] based logic.
# You just need to add the key:values for an `os_family` that differ
# from `defaults.yaml`.
# Only add an `os_family` which is/will be supported by the formula
#
# If you do not need to provide defaults via the `os_family` grain,
# you will need to provide at least an empty dict in this file, e.g.
# osfamilymap: {}
---
{%- if grains.os == 'MacOS' %}
    {%- set rootuser = salt['cmd.run']("stat -f '%Su' /dev/console") %}
    {%- set rootgroup = salt['cmd.run']("stat -f '%Sg' /dev/console") %}
{%- elif grains.os == 'Windows' %}
    {%- set rootuser = salt['cmd.run']("id -un") %}
{%- endif %}

Debian:
  pkg:
    repo:
      name: deb https://apt.kubernetes.io/ kubernetes-xenial main
      file: /etc/apt/sources.list.d/kubernetes.list
      key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  devtools:
    pkg:
      minikube:
        use_upstream: binary

RedHat:
  pkg:
    deps:
      - tar
      - gzip
    deps_url:
      - https://rpm.rancher.io/k3s-selinux-0.1.1-rc1.el7.noarch.rpm
    repo:
      baseurl: 'https://pkgs.k8s.io/core:/stable:/v1.29/rpm/'
      gpgkey: 'https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key'
      repo_gpgcheck: 1

Suse:
  pkg:
    deps:
      - tar
      - gzip

Gentoo: {}

Arch:
  pkg:
    deps:
      - tar
      - gzip
      - which
  linux:
    altpriority: 0

Alpine: {}

FreeBSD:
  identity:
    rootgroup: wheel
  client:
    pkg:
      use_upstream: false
  devtools:
    pkg:
      minikube:
        use_upstream: false

OpenBSD:
  identity:
    rootgroup: wheel
  client:
    pkg:
      use_upstream: false
  devtools:
    pkg:
      minikube:
        use_upstream: archive

Windows:
  div: '\\'
  identity:
    rootuser: {{ rootuser | d('') }}
  dir:
    base: C:\\kubernetes
    source: C:\\kubernetes\src\libs
    operators: C:\\kubernetes\src
    tmp: C:\\temp\kubernetes
  client:
    check: systeminfo
    aliases_file: C:\kubernetes\etc\aliases.sh
    pkg:
      name: kubernetes-cli         # choco
      suffix: ''
      use_upstream: package
      binary:
        options: '--strip-components=2'   # windows
        source_hash: '88e30aee1103ab6b4f3c2bd5570b4f739cbc01b4755bfaee915dcb717ae4d8b0b99457e2bb44cc60f47b77822ce6119fbe77bdfbaaf4afa4220b78b40b1c9b2c'  # noqa 204
  server: {}   # none
  node:
    config_file: C:\kubernetes\etc\node.ini
    pkg:
      use_upstream: archive
      archive:
        options: '--strip-components=3'   # windows
        source_hash: 'a38016acc743eb87d4803d2d06c24fc3315a4db6eacbd3f2060f28355ca96f1b3294b30483b74ecea18fe220a9d1319509f26fe02615fbaa7f1ecd11f76b1f6b'  # noqa 204

  sigs:
    pkg:
      kind:
        binary:
          source_hash: 'd309d8056cec8bcabb24e185200ef8f9702e0c01a9ec8a7f7185fe956783ed97'
      krew:
        use_upstream: binary
        suffix: exe
        uri_b: 'https://github.com/kubernetes-sigs/krew/releases/download'
        binary: {}
      kubebuilder:
        use_upstream: false  # no windows binary

  devtools:
    pkg:
      minikube:
        suffix: exe
        config_file: C:\kubernetes\etc\minikube.ini
        environ_file: C:\kubernetes\etc\minkube.sh
        binary: {}
      devspace:
        name: devspace
        suffix: exe
      octant:
        suffix: zip
        archive:
          source_hash: '39c484e6d5e957cb1403afbc99cc0b11d77d101c57e7c9fa686d5db72bd3064a'  # noqa 204
          options: ''  # zipfile
      k3s:
        use_upstream: false   # no windows binary
      kubectx:
        suffix: zip
        archive:
          source_hash: '31a30912ace13fe0a458a253bc76bd106c48f3b0967ac2676cfd8b7fae71e314'  # noqa 204
          options: ''
      kubens:
        suffix: zip
        archive:
          source_hash: 'eab9ace6e25303b522e7006a1c9e44747b9e9c005e15b1fcf8a9678569ca1c95'  # noqa 204
          options: ''
      kudo:
        use_upstream: false  # windows not available
      istio:
        suffix: zip
        arch: ''  # noarch
        archive:
          options: ''  # zipfile
      cue:
        suffix: zip
        archive:
          source_hash: '13a2db61e78473db0fab0530e8ebf70aa37ed6fb88ee14df240880ec7e70c0f1'  # noqa 204
          options: ''
      audit2rbac:
        archive:
          source_hash: '57e1b6f108141da818eb29ad5755d386f56be067737302fabfa092e335c6ce57'  # noqa 204
      stern:
        suffix: exe
        binary:
          source_hash: '75708b9acf6ef0eeffbe1f189402adc0405f1402e6b764f1f5152ca288e3109e'  # noqa 204
      dive:
        suffix: zip
        archive:
          source_hash: 'e88cf463b48d9edc22f71b63d43f076826f32f6777ac9a8d288dd3dd8f0599e3'  # noqa 204
          options: ''
      linkerd2:
        name: linkerd2-cli-edge
        suffix: exe
      skaffold:
        suffix: exe

MacOS:
  dir:
    default: /etc/defaults
  identity:
    rootuser: {{ rootuser | d('') }}
    rootgroup: {{ rootgroup | d('') }}
  server: {}
  node: {}
  client:
    aliases_file: /etc/defaults/kubernetes-aliases.sh
    pkg:
      name: kubernetes-cli         # homebrew
      use_upstream: archive
      archive:
        source_hash: '41dcfff40498335c92d872eb6aa6215d9d84908f79bdf61777d52243a446fffb114313fb586ec6a58908684eaf86fae6b2fbaa70a2a3f06f78470a20ca4d9727'  # noqa 204

  sigs:
    pkg:
      kubebuilder:
        binary:
          source_hash: '2a6c5e0e276b65cfbe173fca07b318ecff1752bf947002641b808c4a40187f2c'  # noqa 204
      kind:
        name: kind      # homebrew
        binary:
          source_hash: '432bef555a70e9360b44661c759658265b9eaaf7f75f1beec4c4d1e6bbf97ce3'  # noqa 204
      krew:
        commands:
          - krew-darwin_amd64

  devtools:
    pkg:
      minikube:
        check: sysctl -a | grep machdep.cpu.features
        name: minikube               # homebrew
        use_upstream: binary
        binary: {}
      devspace:
        use_upstream: binary
      kudo:
        name: kudo-cli    # homebrew
        tapname: kudobuilder/tap
        binary:
          source_hash: '95a62092b75b43c147f5b9942f8b0b06ecf3cf34ccad4f301295c618c8ae3514'  # noqa 204
      octant:
        suffix: zip
        archive:
          source_hash: '26004633ee0abca5e810e0fe3dacc950dccdd5b963a6d6f35c2f3addb21df5df'  # noqa 204
          options: '' # zipfile
      linkerd2:
        binary:
          source_hash: '1adc9c53fe968383020b6c4047d42452754e05bc90d1a65f2261d729c6fab4df'  # noqa 204
      k3s:
        use_upstream: false   # no macos binary
      kubectx:
        archive:
          source_hash: '7adeaf057809ef756b6f290c2e0557e86c1d04718239166a9ef0298db6fe5b27'  # noqa 204
      kubens:
        archive:
          source_hash: 'ef43ab1217e09ac1b929d4b9dd2c22cbb10540ef277a3a9b484c020820c988b1'  # noqa 204
      cue:
        archive:
          source_hash: '24717a72b067a4d8f4243b51832f4a627eaa7e32abc4b9117b0af9aa63ae0332'  # noqa 204
      stern:
        archive:
          source_hash: '7aea3b6691d47b3fb844dfc402905790665747c1e6c02c5cabdd41994533d7e9'  # noqa 204
      dive:
        archive:
          source_hash: 'b4cad081146defcb90b418215cdfdf835372abd4adf1b0f33aaf1ea5d9bb3244'  # noqa 204
      audit2rbac:
        archive:
          source_hash: 'e89d9e7e6e68d7fdf135ab0912f57afda0fea07931ac443a367d35671f83d1b1'  # noqa 204
      skaffold:
        binary:
          source_hash: '1e9ad5ed0ba3b277c582dbdb7e13c3307ff1dc21887bf18d4c5aece486e0518c'  # noqa 204

  operator:
    sdk:
      pkg:
        ansible-operator:
          binary:
            source_hash: 'd1d2414318a3417112b788ddf04b99ad00c133721e313a74c678c47df3bb7bac'  # noqa 204
        helm-operator:
          binary:
            source_hash: '14ccf72c1f4781096174d62ff385bd9de9617ef4fc0d612f21f0ae00439b2fd9'  # noqa 204
        operator-sdk:
          binary:
            source_hash: '37c246ea83bfc339d0e323bb4b02712cd6e1ba71f87be658d42ecfb12f03fd46'  # noqa 204

  operators:
    pkg:
      grafana-operator:
        archive:
          source_hash: '65a0ae518331e0830fcb73ff83ab09fae8b101037610587a0038b8c0f6fb64db'  # noqa 204
